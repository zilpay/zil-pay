Project Path: storage

Source Tree:

```txt
storage
├── account.ts
├── address-type.ts
├── argon.ts
├── background.ts
├── chain.ts
├── explorer.ts
├── ftoken.ts
├── index.ts
├── notification.ts
├── settings.ts
└── wallet.ts

```

`storage/account.ts`:

```ts
import { AddressType } from './address-type';

export class Account {
  addr: string;
  addrType: AddressType;
  name: string;
  pubKey: string;
  chainHash: number;
  chainId: number;
  slip44: number;
  index: number;

  constructor(data: Record<string, unknown>) {
    this.addr = data.addr as string;
    this.addrType = data.addrType as AddressType;
    this.name = data.name as string;
    this.pubKey = data.pubKey as string;
    this.chainHash = data.chainHash as number;
    this.chainId = data.chainId as number;
    this.slip44 = data.slip44 as number;
    this.index = data.index as number;
  }
}

```

`storage/address-type.ts`:

```ts
export enum AddressType {
  Bech32,
  EthCheckSum
}


```

`storage/argon.ts`:

```ts
import { Variant, Version, Config } from '@hicaru/argon2-pure.js';
import { APP_ID } from '../../config/argon2';
import { Argon2Config } from '../../crypto/argon2';
import { utils } from 'aes-js';

export class WalletArgon2Params {
  memory: number;
  iterations: number;
  threads: number;
  secret: string;

  get argonConfgi(): Argon2Config {
    return new Config(
      APP_ID,
      64,
      this.threads,
      this.memory,
      utils.hex.toBytes(this.secret),
      this.iterations,
      Variant.Argon2id,
      Version.Version13,

    );
  }

  constructor(data: Record<string, unknown>) {
    this.memory = data.memory as number;
    this.iterations = data.iterations as number;
    this.threads = data.threads as number;
    this.secret = data.secret as string;
  }
}

```

`storage/background.ts`:

```ts
import { ChainConfig } from './chain';
import { Wallet } from './wallet';

export enum AppearancesTheme {
  System,
  Dark,
  Light
}

export class BackgroundState {
  wallets: Wallet[];
  notificationsGlobalEnabled: boolean;
  locale: string | null;
  appearances: AppearancesTheme;
  abbreviatedNumber: boolean;
  hideBalance: boolean;
  storageVersion: number;
  chains: ChainConfig[];

  constructor(data: Record<string, unknown>) {
    this.wallets = (data.wallets as Record<string, unknown>[]).map(
      (w) => new Wallet(w)
    );
    this.notificationsGlobalEnabled = data.notificationsGlobalEnabled as boolean;
    this.locale = data.locale as string | null ?? null;
    this.appearances = data.appearances as AppearancesTheme;
    this.abbreviatedNumber = data.abbreviatedNumber as boolean;
    this.hideBalance= data.hideBalance as boolean;
    this.chains = (data.chains as Record<string, unknown>[]).map(
      (c) => new ChainConfig(c)
    );
  }
}

```

`storage/chain.ts`:

```ts
import { FToken } from './ftoken';
import { Explorer } from './explorer';

export class ChainConfig {
  name: string;
  logo: string;
  chain: string;
  shortName: string;
  rpc: string[];
  features: number[];
  chainId: number;
  chainIds: BigUint64Array;
  slip44: number;
  diffBlockTime: number;
  chainHash: number;
  ens: string | null;
  explorers: Explorer[];
  fallbackEnabled: boolean;
  testnet: boolean | null;
  ftokens: FToken[];

  constructor(data: Record<string, unknown>) {
    this.name = data.name as string;
    this.logo = data.logo as string;
    this.chain = data.chain as string;
    this.shortName = data.shortName as string;
    this.rpc = data.rpc as string[];
    this.features = data.features as number[];
    this.chainId = data.chainId as number;
    this.chainIds = data.chainIds as BigUint64Array;
    this.slip44 = data.slip44 as number;
    this.diffBlockTime = data.diffBlockTime as number;
    this.chainHash = data.chainHash as number;
    this.ens = data.ens as string | null ?? null;
    this.explorers = (data.explorers as Record<string, unknown>[]).map(
      (e) => new Explorer(e)
    );
    this.fallbackEnabled = data.fallbackEnabled as boolean;
    this.testnet = data.testnet as boolean | null ?? null;
    this.ftokens = (data.ftokens as Record<string, unknown>[]).map(
      (t) => new FToken(t)
    );
  }
}

```

`storage/explorer.ts`:

```ts
export class Explorer {
  name: string;
  url: string;
  icon: string | null;
  standard: number;

  constructor(data: Record<string, unknown>) {
    this.name = data.name as string;
    this.url = data.url as string;
    this.icon = data.icon as string | null ?? null;
    this.standard = data.standard as number;
  }
}

```

`storage/ftoken.ts`:

```ts
import { AddressType } from './address-type';
 
export class FToken {
  name: string;
  symbol: string;
  decimals: number;
  addr: string;
  addrType: AddressType;
  logo: string | null;
  balances: Record<number, string>;
  rate: number;
  default_: boolean;
  native: boolean;
  chainHash: number;

  constructor(data: Record<string, unknown>) {
    this.name = data.name as string;
    this.symbol = data.symbol as string;
    this.decimals = data.decimals as number;
    this.addr = data.addr as string;
    this.addrType = data.addrType as AddressType;
    this.logo = data.logo as string | null ?? null;
    this.balances = data.balances as Record<number, string>;
    this.rate = data.rate as number;
    this.default_ = data.default_ as boolean;
    this.native = data.native as boolean;
    this.chainHash = data.chainHash as number;
  }
}

```

`storage/notification.ts`:

```ts
export class Notification {
  transactions: boolean;

  constructor(data: Record<string, unknown>) {
    this.transactions = data.transactions as boolean;
  }
}

```

`storage/settings.ts`:

```ts
import { WalletArgon2Params } from './argon';
import { CipherOrders } from '../../crypto/keychain';

export enum RatesApiOptions {
  CoinGecko
} 

export class WalletSettings {
  cipherOrders: CipherOrders[];
  argonParams: WalletArgon2Params;
  currencyConvert: string;
  ipfsNode: string | null;
  ensEnabled: boolean;
  tokensListFetcher: boolean;
  nodeRankingEnabled: boolean;
  maxConnections: number;
  requestTimeoutSecs: number;
  ratesApiOptions: RatesApiOptions;

  constructor(data: Record<string, unknown>) {
    this.cipherOrders = data.cipherOrders as CipherOrders[];
    this.argonParams = new WalletArgon2Params(data.argonParams as Record<string, unknown>);
    this.currencyConvert = data.currencyConvert as string;
    this.ipfsNode = data.ipfsNode as string || null;
    this.ensEnabled = data.ensEnabled as boolean;
    this.tokensListFetcher = data.tokensListFetcher as boolean;
    this.nodeRankingEnabled = data.nodeRankingEnabled as boolean;
    this.maxConnections = data.maxConnections as number;
    this.requestTimeoutSecs = data.requestTimeoutSecs as number;
    this.ratesApiOptions = data.ratesApiOptions as RatesApiOptions;
  }
}

```

`storage/wallet.ts`:

```ts
import { Account } from './account';
import { FToken } from './ftoken';
import { WalletSettings } from './settings';

export class Wallet {
  walletType: string;
  walletName: string;
  authType: string;
  walletAddress: string;
  accounts: Account[];
  selectedAccount: number;
  tokens: FToken[];
  settings: WalletSettings;
  defaultChainHash: number;
  vault: string;

  constructor(data: Record<string, unknown>) {
    this.walletType = data.walletType as string;
    this.vault = data.vault as string;
    this.walletName = data.walletName as string;
    this.authType = data.authType as string;
    this.walletAddress = data.walletAddress as string;
    this.accounts = (data.accounts as Record<string, unknown>[]).map(
      (a) => new Account(a)
    );
    this.selectedAccount = data.selectedAccount as number;
    this.tokens = (data.tokens as Record<string, unknown>[]).map(
      (t) => new FToken(t)
    );
    this.settings = new WalletSettings(data.settings as Record<string, unknown>);
    this.defaultChainHash = data.defaultChainHash as number;
  }
}

```