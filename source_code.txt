Project Path: zil-pay

Source Tree:

```txt
zil-pay
└── popup
    ├── App.svelte
    ├── Router.svelte
    ├── pages
    │   ├── Home.svelte
    │   ├── Lock.svelte
    │   ├── NotFoundPage.svelte
    │   └── Start.svelte
    └── styles
        ├── global.scss
        └── mixins.scss

```

`zil-pay/popup/App.svelte`:

```svelte
<script lang="ts">
	import { get } from 'svelte/store';
	import { setupI18n } from 'popup/i18n';
	import globlSettingsStore from 'popup/store/global';
	import { Locales } from 'config/locale';
	import Router from './Router.svelte';

	let loading = $state(true);

	$effect(() => {
		const initialize = async () => {
			const { locale } = get<any>(globlSettingsStore);
			try {
				if (locale === Locales.Auto) {
					await setupI18n();
				} else {
					await setupI18n({
						withLocale: locale,
					});
				}
			} catch (err) {
				console.error(err);
				await setupI18n({
					withLocale: Locales.EN,
				});
			} finally {
				loading = false;
			}
		};

		initialize();
	});
</script>

{#if !loading}
	<Router />
{/if}

<style lang="scss">
	@use './styles/global.scss' as globalStyles;
</style>

```

`zil-pay/popup/Router.svelte`:

```svelte
<script lang="ts">
	import { matchRoute, notFoundRoute, parseUrlParams, routes } from './router';
	import { RouteGuard } from './router/guard';
	import { currentParams, currentRoute } from './store/route';

	export function findRouteByHash(hash: string) {
		const path = hash.replace('#', '').replace(/^\//, '/');
		const found = matchRoute(path, routes);

		if (found) {
			return found;
		}

		return notFoundRoute;
	}

	function handleRouteChange() {
		const path = window.location.hash.slice(1) || '/';
		const route = findRouteByHash(path);
		const params = parseUrlParams(route.path, path);

		currentParams.set(params);

		if (route) {
			const guardedRoute = RouteGuard.checkRoute(route);
			currentRoute.set(guardedRoute);
		} else {
			currentRoute.set(notFoundRoute);
		}
	}

	$effect(() => {
		handleRouteChange();
		window.addEventListener('hashchange', handleRouteChange);
		return () => {
			window.removeEventListener('hashchange', handleRouteChange);
		};
	});

	const Component = $derived($currentRoute?.component);
</script>

{#if Component}
	<Component {...$currentParams} />
{/if}

```

`zil-pay/popup/pages/Home.svelte`:

```svelte
<script lang="ts">
</script>

<div class="home-container">
  <h1>Welcome to the Wallet</h1>
</div>

<style lang="scss">
</style>

```

`zil-pay/popup/pages/Lock.svelte`:

```svelte
<script lang="ts">
</script>

<div class="home-container">
  <h1>Welcome to the Wallet</h1>
</div>

<style lang="scss">
</style>

```

`zil-pay/popup/pages/NotFoundPage.svelte`:

```svelte
<script lang="ts">
</script>

<style>
    .not-found-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        text-align: center;
        background-color: #f8f9fa;
        color: #343a40;
        font-family: Arial, sans-serif;
    }

    .not-found-container h1 {
        font-size: 6rem;
        margin: 0;
    }

    .not-found-container p {
        font-size: 1.25rem;
    }
</style>

<div class="not-found-container">
    <h1>404</h1>
    <p>Oops! The page you are looking for doesn't exist.</p>
</div>

```

`zil-pay/popup/styles/global.scss`:

```scss
@use "./mixins";

:global(*),
:global(*::after),
:global(*::before) {
  @include mixins.box-sizing(border-box);
  margin: 0;
  padding: 0;
}

:global(:root) {
  font-family: var(--font-family, system-ui, sans-serif);
  font-size: 16px;
  line-height: 1.5;
  color: var(--text-color);
  
  /* Smooth scrolling for supported browsers */
  scroll-behavior: smooth;
}

:global(*) {
  user-select: none;
  scrollbar-width: none;
  -webkit-tap-highlight-color: transparent; /* Remove tap highlight on mobile */
}

/* Specifically handle focus outlines for accessibility */
:global(*:focus) {
  outline: 2px solid var(--primary-color, #3498db);
  outline-offset: 2px;
}

:global(*:focus:not(:focus-visible)) {
  outline: none; /* Remove outline for mouse users but keep for keyboard */
}

/* Document body */
:global(body),
:global(html) {
  margin: 0;
  padding: 0;
  text-rendering: optimizeLegibility;
  font-kerning: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  
  min-width: 320px;
  min-height: 600px;
  
  background-color: var(--background-color);
  
  /* Prevent overscrolling on iOS */
  overscroll-behavior: none;
}

/* Links */
:global(a) {
  text-decoration: none;
  color: var(--link-color, var(--primary-color));
  transition: color 0.2s ease;
  
  &:hover {
    color: var(--link-hover-color, var(--primary-color-dark));
  }
}

/* Images */
:global(img) {
  max-width: 100%;
  height: auto;
  display: block;
}

/* Hide scrollbars but allow scrolling */
:global(::-webkit-scrollbar) {
  display: none;
}

/* Media query for dark mode preferences */
@media (prefers-color-scheme: dark) {
  :global(html:not([data-theme])) {
    /* Fallback dark mode styles if no theme is explicitly set */
    /* You can use your theme variables here */
  }
}

/* Print styles */
@media print {
  :global(body) {
    background-color: white;
    color: black;
  }
  
  :global(*) {
    user-select: text;
  }
}

```

`zil-pay/popup/styles/mixins.scss`:

```scss
@mixin box-sizing($box-model) {
  box-sizing: $box-model;
}

```